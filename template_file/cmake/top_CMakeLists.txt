cmake_minimum_required(VERSION 3.3.2)
project(TestCpp VERSION 1.0.0.0)

set(MODULE_LIST
	Container
	Dynamicast
	Function
	Initilizerlist
	UniquePtr
	TestLib
	Tuple
)

set(LIBRARY_LIST
	InitLib
)

set(PACKAGE_LIST
	dtype
)

include(${PROJECT_SOURCE_DIR}/build/cmakeinfo.cmake)

# set cmake
# ->
# // configure
if(NOT CMAKE_CONFIGURATION_TYPES AND NOT CMAKE_BUILD_TYPE)
    set(CMAKE_BUILD_TYPE Release CACHE STRING "CMake build type" FORCE)
endif()

# // custom output directory
if(CMAKE_SIZEOF_VOID_P EQUAL 8)
  if(CMAKE_HOST_WIN32)
    set(TAEGET_ARCH "x64")
  elseif(CMAKE_HOST_APPLE)
    set(TAEGET_ARCH "x86_64")
  elseif(CMAKE_HOST_UNIX)
    set(TAEGET_ARCH "64bit")
  else()
    message(AUTHOR_WARNING, "arch of host not support")
  endif()
else()
  if(CMAKE_HOST_WIN32)
    set(TAEGET_ARCH "win32")
  elseif(CMAKE_HOST_APPLE)
    set(TAEGET_ARCH "i386")
  elseif(CMAKE_HOST_UNIX)
    set(TAEGET_ARCH "32bit")
  else()
    message(AUTHOR_WARNING, "arch of host not support")
  endif()
endif()
message("CMAKE_SIZEOF_VOID_P: ${CMAKE_SIZEOF_VOID_P} ${TAEGET_ARCH}")
if(CMAKE_CONFIGURATION_TYPES)
  set(TARGET_OUTPUT_DIR_NAME ${CMAKE_SYSTEM_NAME}-${TAEGET_ARCH}-${CMAKE_CFG_INTDIR})
else()
  set(TARGET_OUTPUT_DIR_NAME ${CMAKE_SYSTEM_NAME}-${TAEGET_ARCH}-${CMAKE_BUILD_TYPE})
endif()
message("TARGET_OUTPUT_DIR_NAME: ${TARGET_OUTPUT_DIR_NAME}")
set(TARGET_OUTPUT_DIR ${PROJECT_SOURCE_DIR}/target/${TARGET_OUTPUT_DIR_NAME})
# // set output directory
set(CMAKE_ARCHIVE_OUTPUT_DIRECTORY ${TARGET_OUTPUT_DIR}/lib)
set(CMAKE_LIBRARY_OUTPUT_DIRECTORY ${TARGET_OUTPUT_DIR}/bin)
set(CMAKE_RUNTIME_OUTPUT_DIRECTORY ${TARGET_OUTPUT_DIR}/bin)
set(CMAKE_PDB_OUTPUT_DIRECTORY     ${TARGET_OUTPUT_DIR}/pdb)
set(PROJECT_OUTPUT_INCLUDE_DIR     ${PROJECT_SOURCE_DIR}/include)
foreach(config ${CMAKE_CONFIGURATION_TYPES})
  string(TOUPPER "${config}" config_uc)
  foreach(type ARCHIVE LIBRARY RUNTIME PDB)
    set(CMAKE_${type}_OUTPUT_DIRECTORY_${config_uc}
        ${CMAKE_${type}_OUTPUT_DIRECTORY})
  endforeach()
  unset(config_uc)
endforeach()



# // rpath
if(NOT CMAKE_HOST_WIN32)
  set(CMAKE_BUILD_WITH_INSTALL_RPATH TRUE)
  if(CMAKE_HOST_APPLE)
    cmake_policy(SET CMP0068 OLD)
    set(CMAKE_INSTALL_RPATH "@executable_path")
  elseif(CMAKE_HOST_UNIX)
    set(CMAKE_INSTALL_RPATH "$ORIGIN")
  else() 
    message(AUTHOR_WARNING, "rpath not support")
  endif()
endif()
# // suport c++11
set(CMAKE_CXX_STANDARD 11)
# <-

# Symbol generation
if(CMAKE_HOST_APPLE)
  set(CMAKE_XCODE_ATTRIBUTE_DEBUG_INFORMATION_FORMAT "dwarf-with-dsym")
elseif(CMAKE_HOST_UNIX AND CMAKE_BUILD_TYPE STREQUAL Debug)
  set(CMAKE_CXX_FLAGS "${CMAKE_CXX_FLAGS} -g")
endif()

#include(${PROJECT_SOURCE_DIR}/build/cmakeinfo.cmake)

# load modules
# open folder filter
SET_PROPERTY(GLOBAL PROPERTY USE_FOLDERS ON)
foreach(module ${MODULE_LIST} ${LIBRARY_LIST})
    set(subdirectory code/${module})
    if(EXISTS ${PROJECT_SOURCE_DIR}/${subdirectory}/CMakeLists.txt)
        add_subdirectory(${subdirectory})
    else()
        message(AUTHOR_WARNING "No CMakeLists.txt found in ${subdirectory}")
    endif()
endforeach()

# load packets
include(ExternalProject)
foreach(package ${PACKAGE_LIST})
    if(EXISTS ${PROJECT_SOURCE_DIR}/package/${package}.cmake)
        include(${PROJECT_SOURCE_DIR}/package/${package}.cmake)
    else()
        message(AUTHOR_WARNING "No ${package}.cmake found in ${PROJECT_SOURCE_DIR}/package")
    endif()
endforeach()
